# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-05-02 07:45
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0001_initial'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Connectmethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(max_length=255)),
                ('connecttext', models.TextField()),
                ('servicename', models.CharField(max_length=32)),
                ('startupscript', models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                'db_table': 'connectmethod',
            },
        ),
        migrations.CreateModel(
            name='Connectmethodmap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disabled', models.IntegerField()),
                ('autoprovisioned', models.IntegerField(blank=True, null=True)),
                ('connectmethodid', models.ForeignKey(db_column='connectmethodid', on_delete=django.db.models.deletion.CASCADE, to='image.Connectmethod')),
            ],
            options={
                'db_table': 'connectmethodmap',
            },
        ),
        migrations.CreateModel(
            name='Connectmethodport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port', models.IntegerField()),
                ('protocol', models.CharField(max_length=3)),
                ('connectmethodid', models.ForeignKey(db_column='connectmethodid', on_delete=django.db.models.deletion.CASCADE, to='image.Connectmethod')),
            ],
            options={
                'db_table': 'connectmethodport',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=70, unique=True)),
                ('prettyname', models.CharField(max_length=60, unique=True)),
                ('minram', models.IntegerField()),
                ('minprocnumber', models.IntegerField()),
                ('minprocspeed', models.SmallIntegerField()),
                ('minnetwork', models.SmallIntegerField()),
                ('maxconcurrent', models.IntegerField(blank=True, null=True)),
                ('reloadtime', models.IntegerField()),
                ('deleted', models.IntegerField()),
                ('test', models.IntegerField()),
                ('lastupdate', models.DateTimeField(blank=True, null=True)),
                ('forcheckout', models.IntegerField()),
                ('maxinitialtime', models.SmallIntegerField()),
                ('project', models.CharField(max_length=6)),
                ('size', models.SmallIntegerField()),
                ('architecture', models.CharField(max_length=6)),
                ('description', models.TextField(blank=True, null=True)),
                ('usage', models.TextField(blank=True, null=True)),
                ('basedoffrevisionid', models.IntegerField()),
            ],
            options={
                'db_table': 'image',
            },
        ),
        migrations.CreateModel(
            name='Imagemeta',
            fields=[
                ('id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('checkuser', models.IntegerField()),
                ('subimages', models.IntegerField()),
                ('sysprep', models.IntegerField()),
                ('postoption', models.CharField(blank=True, max_length=32, null=True)),
                ('architecture', models.CharField(blank=True, max_length=10, null=True)),
                ('rootaccess', models.IntegerField()),
                ('sethostname', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'imagemeta',
            },
        ),
        migrations.CreateModel(
            name='Imagerevision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('revision', models.SmallIntegerField()),
                ('datecreated', models.DateTimeField()),
                ('deleted', models.IntegerField()),
                ('datedeleted', models.DateTimeField(blank=True, null=True)),
                ('production', models.IntegerField()),
                ('comments', models.TextField(blank=True, null=True)),
                ('imagename', models.CharField(max_length=75)),
                ('autocaptured', models.IntegerField()),
                ('imageid', models.ForeignKey(db_column='imageid', on_delete=django.db.models.deletion.CASCADE, to='image.Image')),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.CASCADE, to='authentication.User')),
            ],
            options={
                'db_table': 'imagerevision',
            },
        ),
        migrations.CreateModel(
            name='Imagerevisioninfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usernames', models.CharField(blank=True, max_length=512, null=True)),
                ('firewallenabled', models.CharField(max_length=20)),
                ('timestamp', models.DateTimeField()),
                ('imagerevisionid', models.OneToOneField(db_column='imagerevisionid', on_delete=django.db.models.deletion.CASCADE, to='image.Imagerevision')),
            ],
            options={
                'db_table': 'imagerevisioninfo',
            },
        ),
        migrations.CreateModel(
            name='Imagetype',
            fields=[
                ('id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=16, unique=True)),
            ],
            options={
                'db_table': 'imagetype',
            },
        ),
        migrations.CreateModel(
            name='Os',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('prettyname', models.CharField(max_length=64, unique=True)),
                ('minram', models.IntegerField()),
                ('sourcepath', models.CharField(blank=True, max_length=30, null=True)),
                ('installtype', models.ForeignKey(db_column='installtype', on_delete=django.db.models.deletion.CASCADE, to='core.Osinstalltype')),
                ('moduleid', models.ForeignKey(blank=True, db_column='moduleid', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Module')),
            ],
            options={
                'db_table': 'OS',
            },
        ),
        migrations.CreateModel(
            name='Ostype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
            options={
                'db_table': 'OStype',
            },
        ),
        migrations.CreateModel(
            name='Subimages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imageid', models.ForeignKey(db_column='imageid', on_delete=django.db.models.deletion.CASCADE, to='image.Image')),
                ('imagemetaid', models.ForeignKey(db_column='imagemetaid', on_delete=django.db.models.deletion.CASCADE, related_name='opa', to='image.Imagemeta')),
            ],
            options={
                'db_table': 'subimages',
            },
        ),
        migrations.CreateModel(
            name='Vmtype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'vmtype',
            },
        ),
        migrations.CreateModel(
            name='Winkms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=50)),
                ('port', models.SmallIntegerField()),
                ('affiliationid', models.ForeignKey(db_column='affiliationid', on_delete=django.db.models.deletion.CASCADE, to='core.Affiliation')),
            ],
            options={
                'db_table': 'winKMS',
            },
        ),
        migrations.CreateModel(
            name='Winproductkey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('productname', models.CharField(max_length=100)),
                ('productkey', models.CharField(max_length=100)),
                ('affiliationid', models.ForeignKey(db_column='affiliationid', on_delete=django.db.models.deletion.CASCADE, to='core.Affiliation')),
            ],
            options={
                'db_table': 'winProductKey',
            },
        ),
        migrations.AddField(
            model_name='os',
            name='type',
            field=models.ForeignKey(db_column='type', on_delete=django.db.models.deletion.CASCADE, to='image.Ostype'),
        ),
        migrations.AddField(
            model_name='image',
            name='imagemetaid',
            field=models.ForeignKey(blank=True, db_column='imagemetaid', null=True, on_delete=django.db.models.deletion.CASCADE, to='image.Imagemeta'),
        ),
        migrations.AddField(
            model_name='image',
            name='imagetypeid',
            field=models.ForeignKey(db_column='imagetypeid', on_delete=django.db.models.deletion.CASCADE, to='image.Imagetype'),
        ),
        migrations.AddField(
            model_name='image',
            name='osid',
            field=models.ForeignKey(db_column='OSid', on_delete=django.db.models.deletion.CASCADE, to='image.Os'),
        ),
        migrations.AddField(
            model_name='image',
            name='ownerid',
            field=models.ForeignKey(blank=True, db_column='ownerid', null=True, on_delete=django.db.models.deletion.CASCADE, to='authentication.User'),
        ),
        migrations.AddField(
            model_name='image',
            name='platformid',
            field=models.ForeignKey(db_column='platformid', on_delete=django.db.models.deletion.CASCADE, to='core.Platform'),
        ),
        migrations.AddField(
            model_name='connectmethodmap',
            name='imagerevisionid',
            field=models.ForeignKey(blank=True, db_column='imagerevisionid', null=True, on_delete=django.db.models.deletion.CASCADE, to='image.Imagerevision'),
        ),
        migrations.AddField(
            model_name='connectmethodmap',
            name='osid',
            field=models.ForeignKey(blank=True, db_column='OSid', null=True, on_delete=django.db.models.deletion.CASCADE, to='image.Os'),
        ),
        migrations.AddField(
            model_name='connectmethodmap',
            name='ostypeid',
            field=models.ForeignKey(blank=True, db_column='OStypeid', null=True, on_delete=django.db.models.deletion.CASCADE, to='image.Ostype'),
        ),
        migrations.AlterUniqueTogether(
            name='connectmethod',
            unique_together=set([('name', 'description')]),
        ),
        migrations.AlterUniqueTogether(
            name='winproductkey',
            unique_together=set([('affiliationid', 'productname')]),
        ),
        migrations.AlterUniqueTogether(
            name='winkms',
            unique_together=set([('affiliationid', 'address')]),
        ),
        migrations.AlterUniqueTogether(
            name='imagerevision',
            unique_together=set([('imageid', 'revision'), ('production', 'imagename')]),
        ),
        migrations.AlterUniqueTogether(
            name='connectmethodport',
            unique_together=set([('connectmethodid', 'port', 'protocol')]),
        ),
    ]
